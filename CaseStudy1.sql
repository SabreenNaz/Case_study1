--1. Display the number of states present in the LocationTable.

select  COUNT(DISTINCT State) As Number_of_States from Location

--2. How many products are of regular type?

SELECT COUNT(Product) AS No_Of_Regular_type FROM Product
WHERE Type = 'Regular'

--3. How much spending has been done on marketing of product ID 1?

SELECT ProductId, SUM(Marketing) Spending FROM Fact
WHERE ProductId = 1
Group By ProductId


--4. What is the minimum sales of a product?

SELECT  Product, Sales As MinimumSales FROM Fact
FULL OUTER JOIN Product
 ON Product.ProductId = Fact.ProductId
WHERE Sales = ( SELECT MIN(Sales) FROM Fact)--SUBQUERY

--5. Display the max Cost of Good Sold (COGS).

SELECT MAX(COGS) Max_COGS FROM FACT

--6. Display the details of the product where product type is coffee.

SELECT * FROM Product
WHERE Product_Type = 'Coffee'

--7. Display the details where total expenses are greater than 40

SELECT ProductId, Sales, Profit, Total_Expenses FROM Fact
WHERE Total_Expenses>40
ORDER BY Total_Expenses

--8. What is the average sales in area code 719?

SELECT Area_Code, AVG(Sales) Avg_Sales FROM Fact
WHERE Area_Code = 719
GROUP BY Area_Code

--9. Find out the total profit generated by Colorado state.

SELECT State, SUM(Profit)Total_Profit FROM Fact F
INNER JOIN Location L
  ON L.Area_Code =F.Area_Code
WHERE State = 'Colorado'
GROUP BY State

--10. Display the average inventory for each product ID.

SELECT ProductId, AVG(Inventory) AVG_Inventory FROM Fact
GROUP BY ProductId
ORDER BY ProductId

--11. Display state in a sequential order in a Location Table.
SELECT DISTINCT State FROM Location
ORDER BY State

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
	SELECT Product, AVG(Budget_Margin) AVG_Budget_Margin FROM Fact F
	INNER JOIN Product P
	 ON P.ProductId = F.ProductId
	GROUP BY Product
	HAVING AVG(Budget_Margin) > 100
	ORDER BY AVG_Budget_Margin

--13. What is the total sales done on date 2010-01-01?
SELECT SUM(SALES) AS Total_Sales FROM Fact
WHERE Date = '2010-01-01'

--14. Display the average total expense of each product ID on an individual date.
SELECT  Date, ProductID, AVG(Total_Expenses) AVG_Total_Expenses FROM Fact
GROUP BY Date, ProductID
ORDER BY Date

--15. Display the table with the following attributes such as date, productID,product_type, product, sales, profit, state, area_code.
SELECT 
      F.Date,
	  F.ProductId,
	  P.Product_Type,
	  P.Product,
	  F.Sales,
	  F.Profit,
	  L.State,
	  L.Area_Code
FROM Fact F
INNER JOIN Product P
 ON F.ProductId = P.ProductId
INNER JOIN Location L
 ON L.Area_Code = F.Area_Code

--16. Display the rank without any gap to show the sales wise rank

SELECT ProductId, 
       Sales, 
	   DENSE_RANK()OVER(ORDER BY Sales DESC) AS Sales_wise_Rank FROM Fact

--17. Find the state wise profit and sales.

SELECT L.State
      ,SUM(F.Profit) Profit
      ,SUM(F.Sales) Sales FROM Fact F
INNER JOIN Location L
 ON L.Area_Code = F.Area_Code
GROUP BY State


--18. Find the state wise profit and sales along with the product name.

SELECT L.State,  
       P.Product,
	   SUM(Profit) Profit, 
	   SUM(Sales) Sales  FROM Fact F
INNER JOIN Product P
 ON P.ProductId = F.ProductId
INNER JOIN Location L
 ON L.Area_Code = F.Area_Code
 GROUP BY 
 ROLLUP (State , Product )
 

 select * from Product

-- 19. If there is an increase in sales of 5%, calculate the increasedsales.
select ProductId,
       Sales,
       Sales*5/100+Sales AS Increased_sales
from Fact

--20. Find the maximum profit along with the product ID and producttype.

select Top 1 P.ProductId, 
       P.Product_type,
	   MAX(Profit) Maximum_Profit from Fact F
INNER JOIN Product P
    ON P.ProductId = F.ProductId
GROUP BY Product_Type, P.ProductId
order by Maximum_Profit DESC


--21. Create a stored procedure to fetch the result according to the product type from Product Table.
select * from Product

Create or alter  Procedure FetchProductbyType
  @ProductType NVARCHAR(50)
AS
BEGIN
  Select *
  from Product
  where Product_Type = @ProductType;
END

exec FetchProductbyType 'Tea'


--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.

select
       Total_Expenses,
CASE
   WHEN Total_Expenses<60 THEN 'Profit'
   ELSE 'Loss'  
END 
AS Status
from Fact

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
select * from Fact

Select CONVERT (VARCHAR, DATEadd(WEEK, datediff(WEEK, 0, SALES),0), 101)AS WEEKLYDATE,
ProductId,
SUM(SALES) AS TOTALSALES
FROM FACT
GROUP BY Rollup (ProductId, CONVERT (varchar, dateadd(week, datediff(week, 0, Sales),0), 101))
Order by  ProductId;

--24. Apply union and intersection operator on the tables which consist of attribute area code.

select  Area_Code from Fact
UNION
select Area_Code from Location

select Area_Code from Fact
INTERSECT
select Area_Code from Location

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.

Create or alter function dbo.GetProductbyType 
(
@ProductType NVARCHAR(50)
)
Returns table 
AS
RETURN
(

   SELECT *
   FROM Product
   where Product_Type = @ProductType
)

--26. Change the product type from coffee to tea where product ID is 1 and undo it.

begin transaction
Update Product
set Product_Type = 'Tea'
where ProductId = 1
ROLLBACK transaction



--27. Display the date, product ID and sales where total expenses are between 100 to 200.

SELECT Date,
       ProductId,
	   Sales,
	   Total_Expenses
FROM Fact
WHERE Total_Expenses BETWEEN 100 AND 200



--28. Delete the records in the Product Table for regular type.

DELETE from Product
Where Type = 'Regular'

--29.Display the ASCII value of the fifth character from the column Product

SELECT Product, ASCII(SUBSTRING(Product,5,1))AS ASCII_VALUE 
from Product

